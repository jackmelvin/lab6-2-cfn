AWSTemplateFormatVersion: "2010-09-09"

Description: AWS CloudFormation workshop - Nested stacks - VPC template.

Parameters:
  AvailabilityZones:
    Type: CommaDelimitedList
    Description: The list of Availability Zones to use for the subnets in the VPC.

  VPCName:
    Type: String
    Description: The name of the VPC.

  VPCCidr:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PublicSubnetName:
    Type: String
    Description: The name of the public subnet.

  PublicSubnetCidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnet1Name:
    Type: String
    Description: The name of the private subnet 1.

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnet2Name:
    Type: String
    Description: The name of the private subnet 2.

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Public Subnet
  VPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName

  # Private Subnet #1
  VPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet1Name

  # Private Subnet #2
  VPCPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet2Name

  # Public Subnet Route Table
  VPCPublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW

  # Public Subnet Route Table Association
  VPCPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnetRouteTable
      SubnetId:
        Ref: VPCPublicSubnet

  # Private Subnet #1 Route Table
  VPCPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet1Name
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPNGateway

  # Private Subnet #1 Route Table Association
  VPCPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTable
      SubnetId:
        Ref: VPCPrivateSubnet1

  # Private Subnet #2 Route Table
  VPCPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet2Name
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPNGateway

  # Private Subnet #2 Route Table Association
  VPCPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable
      SubnetId:
        Ref: VPCPrivateSubnet2

  # Internet Gateway
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Internet Gateway Attachment
  VPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: VPCIGW

  # VPC Endpoint - EC2
  VPCEndpoint1:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPCPrivateSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  # VPC Endpoint - Logs
  VPCEndpoint2:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPCPrivateSubnet1
      SecurityGroupIds:
        - !Ref MonitoringSecurityGroup

  # VPC Endpoint - Monitoring
  VPCEndpoint3:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.monitoring"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPCPrivateSubnet1
      SecurityGroupIds:
        - !Ref MonitoringSecurityGroup

  # Virtual Private Gateway
  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1

  VPCVGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      VpnGatewayId:
        Ref: VPNGateway

  # Virtual Private Gateway Route Propagation
  VPNGatewayRoutePropagationPublicRt:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref VPCPublicSubnetRouteTable
      VpnGatewayId: !Ref VPNGateway

  VPNGatewayRoutePropagationPrivateRt1:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref VPCPrivateSubnet1RouteTable
      VpnGatewayId: !Ref VPNGateway

  VPNGatewayRoutePropagationPrivateRt2:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref VPCPrivateSubnet2RouteTable
      VpnGatewayId: !Ref VPNGateway

  # Public Network ACL
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - !Split
              - "-"
              - !Select [0, !Split ["-", !Ref PublicSubnetName]]
  PublicNetworkAclInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PublicNetworkAclInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0
  PublicNetworkAclOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PublicNetworkAclOutboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 1
      Protocol: -1
      Egress: true
      RuleAction: deny
      CidrBlock: 0.0.0.0/0

  # Public Network ACL Association
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: VPCPublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl

  # Private Network ACL
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - !Split
              - "-"
              - !Select [0, !Split ["-", !Ref PublicSubnetName]]
  PrivateNetworkAclInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PrivateNetworkAclInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0
  PrivateNetworkAclOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PrivateNetworkAclOutboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 1
      Protocol: -1
      Egress: true
      RuleAction: deny
      CidrBlock: 0.0.0.0/0

  # Private Subnet Network ACL Association
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: VPCPrivateSubnet1
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: VPCPrivateSubnet2
      NetworkAclId:
        Ref: PrivateNetworkAcl

  # Security Group for Bastion Host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-DWH-BASTION"
      GroupDescription: !Sub "${VPCName}-DWH-BASTION"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 122.20.253.63/32
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 202.32.38.1/32
        # Thuy home addr
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 118.86.227.112/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-DWH-CW"

  # Security Group for Monitoring
  MonitoringSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-DWH-CW"
      GroupDescription: !Sub "${VPCName}-DWH-CW"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.72.0.0/24
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 10.72.0.185/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-DWH-CW"

  # Security Group for EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-DWH-EC2"
      GroupDescription: !Sub "${VPCName}-DWH-EC2"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.72.0.185/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-DWH-EC2"

  # Security Group for WebFOCUS
  WebFOCUSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-DWH-WEBFOCUS"
      GroupDescription: !Sub "${VPCName}-DWH-WEBFOCUS"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.1.0.0/16
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 10.1.0.0/16
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 10.1.0.0/16
        - IpProtocol: tcp
          FromPort: 8121
          ToPort: 8121
          CidrIp: 10.1.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 10.1.0.0/16
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.10.8.5/32
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 10.10.8.5/32
        - IpProtocol: tcp
          FromPort: 8121
          ToPort: 8121
          CidrIp: 10.10.8.5/32
        - IpProtocol: tcp
          FromPort: 8121
          ToPort: 8121
          CidrIp: 10.11.1.99/32
        - IpProtocol: tcp
          FromPort: 8121
          ToPort: 8121
          CidrIp: 10.11.1.101/32
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 10.72.32.108/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-DWH-WEBFOCUS"

  # Security Group for DWH
  DWHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-DWH-WODWHORA"
      GroupDescription: !Sub "${VPCName}-DWH-WODWHORA"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.1.0.0/16
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.1.14.226/32
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.1.14.227/32
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.11.1.99/32
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.11.1.101/32
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.4.14.226/32
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 10.72.0.185/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-DWH-WODWHORA"

# Outputs for other stacks
Outputs:
  VpcId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: VpcId
  DatabaseSGId:
    Description: "Database security group"
    Value: !Ref DWHSecurityGroup
    Export:
      Name: DatabaseSGId
  PrivateSubnet1Id:
    Description: "PrivateSubnet1Id"
    Value: !Ref VPCPrivateSubnet1
    Export:
      Name: PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: "PrivateSubnet2Id"
    Value: !Ref VPCPrivateSubnet2
    Export:
      Name: PrivateSubnet2Id
